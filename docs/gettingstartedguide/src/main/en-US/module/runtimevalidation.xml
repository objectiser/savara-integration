<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="runtimevalidation">
	<title>Runtime Validation</title>

		<note>
		<para>
		Before you can deploy and run the runtime validation example, you will
		need to install the SAVARA JBoss server integration.
		</para>
		</note>
		
		<para>
		The previous sections have provided a brief introduction to the design-time 
		SOA governance features provided within the SAVARA Eclipse Tools distribution.
		The aim of these capabilities are to enable verification of an implementation, initially
		defined just using BPEL process definitions, against a 
		choreography, which in turn has been verified against business requirements defined using 
		scenarios. Therefore this helps to ensure that the implemented system meets the original 
		business requirements.
		</para>

		<para>
		Being able to statically check that the implementation should send or receive messages 
		in the correct order is important, as it will reduce the amount of testing required 
		to ensure the service behaves correctly. However it does not enable the internal 
		implementation details to be verified, which may result in invalid decisions being 
		made at runtime, resulting in unexpected paths being taken.
		</para>
		
		<para>
		Therefore, to ensure this situation does not occur, we also need runtime governance.
		We still need to be able to verify that the services continue to conform to the 
		choreography description. 
		The <emphasis>Service Validator</emphasis> capability within the SAVARA distribution 
		can be used to validate the behaviour of each service.
		</para>

		<para>
		In this section, we will use the <emphasis>purchasing</emphasis> example found in the 
		<filename>${SAVARA}/samples/purchasing</filename> folder.
		</para>

		<section>
			<title>Server Configuration</title>

			<para>
			The runtime validation configuration is defined using specific annotation, that is associated
			with the 'exchange details' components (contained within interactions), within the 
			choreography description.
			</para>

			<para>
			To view the pre-configured runtime service validator configuration defined for the Purchasing
			example, edit the <filename>PurchaseGoods.cdm</filename> file, navigate to the 
			<emphasis>Choreography Flows</emphasis> tab and then select the 
			<emphasis>Choreography->Edit Annotations</emphasis> menu item associated with the first 
			'exchange details' component (as shown below).
			</para>

		<imageobject>
			<imagedata fileref="en-US/images/editvalidatorann.png" align="center" width="3in" />
		</imageobject>

			<para>
			This will display the annotation editor, with the single configured annotation called 
			'validator'. This annotation defines the information required for the runtime validation 
			to monitor this specific message exchange (e.g. the JMS destination
			on which the message will be passed, or in this case the Service Name for the target
			Web Service).
			</para>

		<imageobject>
			<imagedata fileref="en-US/images/validatorannotation.png" align="center" width="3in" />
		</imageobject>

			<para>
			Once an annotation has been defined, it will also be displayed as part of the tooltip 
			for the associated model component, for example:
			</para>

		<imageobject>
			<imagedata fileref="en-US/images/validatortooltip.png" align="center" width="4in" />
		</imageobject>

			<para>
			Once the annotations have been defined for all relevant 'exchange details' components 
			in the choreography description, the choreography file can be copied to the 
			<filename>${JBossAS}/server/default/deploy/savara-jboss.sar/models</filename>
			folder in the JBossAS environment. The service validator configuration for the 
			<emphasis>purchasing</emphasis> example has been preconfigured to be deployed as part of 
			the installation procedure.
			</para>

			<note>
			<para>
			If the <filename>savara-jboss.sar/validator-config.xml</filename> within the JBossAS 
			environment is modified, or choreography description files added, removed or updated within 
			the <filename>savara-jboss.sar/models</filename> sub-folder, then the changes will 
			automatically be detected and used to re-configure the service validators without having to 
			restart the server.
			</para>
			</note>

		</section>

		<section>
			<title>SAVARA Monitor</title>

			<para>
			The SAVARA Monitor is an Eclipse based tool that can be used to help develop,
			test and validate a business process (encoded as a choreography) executing across 
			a distributed system. (Future releases will include equivalent web based tooling
			to enable production based logging and query of the validation information).
			</para>
			
			<para>
			The tool is used to observe a correlated view of the executing business 
			transactions. Each service validator can be configured to report activites (i.e. sent 
			and received messages) that it validates, to enable the correlator to reconstitute a 
			global interpretation of each transaction.
			</para>

			<para>
			This correlated view of each transaction can be used to understand where each 
			transaction is within the process. It can also be used to report
			<emphasis>out of sequence</emphasis>,  <emphasis>unexpected messages</emphasis> and 
			more general errors in the context of the business process.
			</para>

			<para>
			Once the following examples have been deployed to the JBossAS environment, and the 
			server is running, then the monitoring tool can be launched from the Eclipse environment 
			by selecting the <emphasis>Savara->Monitor</emphasis> menu item from the popup menu 
			associated with the choreography (.cdm) file.
			</para>

			<para>
			Wait for the monitor window to start, and indicate that the choreography is being monitored, 
			shown in the status line at the bottom of the window.
			</para>

		</section>

		<section>
			<title>Web Service / WS-BPEL Example - Purchasing</title>
			
			<para>
			Savara includes the ability to validate web services (and therefore BPEL
			processes) that use the jbossws-native stack. However the ODE engine, used
			to execute BPEL processes within RiftSaw, currently optimises communications
			between BPEL processes executing within the same engine, so that the communications
			do not occur using the Web Service stack. This means that Savara is currently
			unable to validate these interactions by default.
			</para>
			
			<para>
			There are two solutions to this problem. The first is to disable the interprocess
			communications used between the two BPEL processes, which will be the approach
			described in this section. The other approach is to implement the 'Credit Agency'
			participant as a JAX-WS service.
			</para>
			
			<section>
				<title>Deploying the Example</title>
				
				<para>
				Once the BPEL processes have been generated, and the implementation details
				added, it is currently necessary to disable the 'inter-process' communication
				that is used to communicate between the two processes (an ODE optimization
				when the processes are running in the same engine). This is achieved by
				editing the deployment descriptor for the Store process (using a text editor
				rather than the Eclipse form editor), and add the attribute
				<emphasis>usePeer2Peer="false"</emphasis> to the <emphasis>invoke</emphasis> element.
				</para>
				
				<para>
				The next step is to deploy the BPEL processes for the Store and CreditAgency
				participants to a JBossAS server running RiftSaw. This can be achieved
				using the Eclipse Web Tooling Project (WTP) server support, in conjunction with
				the JBoss Tools features mentioned in the installation section.
				</para>
				
				<para>
				Create a JBossAS server entry in the <emphasis>Servers</emphasis> view, using
				the <emphasis>New->Server</emphasis> menu item on the view's context menu.
				Configure the server entry to point to a JBossAS environment that has
				previously been configured to run RiftSaw. Select the server in the
				<emphasis>Servers</emphasis> view, and then select the <emphasis>Add and Remove ...</emphasis>
				menu item. This will show a dialog window that will include the CreditAgency
				and Store BPEL projects on the left. Select both projects, and press the
				<emphasis>Add</emphasis> button. When the <emphasis>Finish</emphasis> button
				is selected, the BPEL processes will be associated with the server.
				</para>
			</section>
			
			<section>
				<title>Running the Example</title>
				
				<para>
				Start the server using the <emphasis>Start</emphasis> menu item associated with
				the JBossAS server in the <emphasis>Servers</emphasis> view, or manually from
				a terminal window in the JBossAS server's <filename>bin</filename> folder using
				the <emphasis>run</emphasis> script. Once the server
				has fully started, the BPEL processes should have been deployed.
				</para>
				
				<para>
				The next step is to start the <emphasis>Savara->Monitor</emphasis> associated
				with the <filename>PurchaseGoods.cdm</filename> choreography description.
				</para>
				
				<para>
				The final step is to send a test message to the <emphasis>Store</emphasis>
				BPEL process. This can be achieved by selecting the <filename>PurchaseGoodsProcess_Store.wsdl</filename>
				file, within the <emphasis>PurchaseGoodsProcess_Store</emphasis> project
				(<filename>bpelContents</filename> folder), and then select the menu
				item <emphasis>Web Services->Test with Web Services Explorer</emphasis>.
				</para>
				
				<para>
				Expand the 'StoreInterfaceBinding' node, in the left hand panel of the explorer,
				and select the 'buy' operation. Then select the 'Source' link, which will show the
				various sections of the SOAP message to be sent. Edit the message body to be:
				</para>

				<informalexample>
	  				<programlisting role="XML" ><![CDATA[
		<q0:BuyRequest id="1" amount="200" />
	 				 ]]></programlisting>
				</informalexample>
				
				<para>
				Then press the 'Ok' button further down the panel. This will send the message to the
				Store process, and eventually cause a response to appear in the lower panel.
				</para>
				
				<para>
				Four entries should appear in the SAVARA monitor, the buy request, credit check
				request, credit check ok (response) and buy confirmed (response).
				</para>
				
		<imageobject>
			<imagedata fileref="en-US/images/SAVARAMonitorPurchasing1.png" align="center" width="6in" />
		</imageobject>

				<para>
				To demonstrate how an error would be detected and reported, issue a new request
				such as:
				</para>

				<informalexample>
	  				<programlisting role="XML" ><![CDATA[
		<q0:BuyRequest id="2" amount="300" />
	 				 ]]></programlisting>
				</informalexample>
				
				<para>
				This will result in an unexpected message to be reported, as there is a difference
				between the choreography and the CreditAgency BPEL process (implementation).
				The choreography defines that a valid credit check should be returned if the
				amount is less than 250. However the BPEL process has implemented this condition
				as a valid credit check is where the amount is less or equal to 500.
				</para>
				
		<imageobject>
			<imagedata fileref="en-US/images/SAVARAMonitorPurchasing2.png" align="center" width="6in" />
		</imageobject>

			</section>
		</section>
		
		<section>
			<title>JBossESB Example - Trailblazer</title>
			
			<section>
				<title>Deploying the Example</title>
	
				<para>
				The first step to deploying the Trailblazer example is to configure the JBossAS environment:
				</para>
	
	  			<orderedlist>
		  			<listitem>
					Update the <filename>${JBossAS}/server/default/deployers/esb.deployer/jbossesb-properties.xml</filename> 
					file, in the section entitled "transports" and specify all of the SMTP mail server settings for 
					your environment.
					</listitem>
					<listitem>
						Update the <filename>trailblazer/trailblazer.properties</filename>
						<para>
						Update the <property>file.bank.monitored.directory</property> and 
						<property>file.output.directory</property> properties. These are folders 
						used by the File Based Bank, and are set to <filename>/tmp/input</filename> 
						and <filename>/tmp/output</filename> by default.
						</para>
					</listitem>
					<listitem>
						Update the <filename>trailblazer/esb/conf/jboss-esb.xml</filename>
						<para>
						There is a <emphasis>fs-provider</emphasis> block, update the 
						<property>directory</property> attribute value to be the same as the 
						<property>file.output.directory</property> value in 
						<filename>trailblazer.properties</filename> file.
						</para>
					</listitem>
					<listitem>
						Start the JBossAS server
					</listitem>
				</orderedlist>
	
				<para>
				One the server has been started, the next step is to deploy the relevant 
				components into the JBossAS environment. This is achieved by:
				</para>
	
	  			<orderedlist>
					<listitem>
						From the <filename>trailblazer</filename> folder, execute the following 
						command to deploy the example to the ESB: 
						<emphasis role="bold">ant deploy</emphasis>
						<para>
						this should deploy the ESB and WAR files to your JBoss AS 
						<filename>server/default</filename>.
						</para>
					</listitem>
					<listitem>
						From the <filename>trailblazer/banks</filename> folder, execute the command 
						to start the JMS Bank service: <emphasis role="bold">ant runJMSBank</emphasis>.
					</listitem>
					<listitem>
						From the <filename>trailblazer/banks</filename> folder, execute the command 
						to start the JMS Bank service: <emphasis role="bold">ant runFileBank</emphasis>.
					</listitem>
				</orderedlist>
	
			</section>
	
			<section>
				<title>Running the Example</title>
	
				<para>
				To run the example, you need to start a browser and select the URL 
				<ulink url="http://localhost:8080/trailblazer">localhost:8080/trailblazer</ulink>. This will 
				show the following page, if the server has been configured correctly and the TrailBlazer 
				example deployed:
				</para>
	
			<imageobject>
				<imagedata fileref="en-US/images/TrailblazerWebPage.jpg" align="center" width="4in" />
			</imageobject>
	
				<para>
				Now you can submit quotes, You will see either a loan request rejected (single email) because 
				the score is less than 4, or two emails (one from JMS bank and one from FileBased bank) with 
				valid quotes. When entering subsequent quotes, make sure that the quote reference is updated, 
				so that each session has a unique id.
				</para>
	
			</section>
	
			<section>
				<title>Detecting a Validation Error</title>
	
				<para>
				To demonstrate the detection of validation errors, there is an alternative implementation of the 
				trailblazer modules that behaviour differently to the choreography that is being monitored. 
				Specifically, the credit score threshold used to determine whether a loan request should be 
				issued to the banks, is raised from 4 to 7.
				</para>
	
				<para>
				To deploy the version of the TrailBlazer example that results in validation errors, then:
				</para>
	
	  			<itemizedlist>
					<listitem>
					From the <filename>${SAVARA}/samples/jbossesb/trailblazer</filename> folder, execute the 
					following command to deploy the example to the ESB: 
					<emphasis role="bold">ant deploy-error-client</emphasis>.
					</listitem>
				</itemizedlist>
	
				<para>
				The next step is to issue more transactions, until a credit check score occurs that is between 
				4 and 6 inclusive. This will result in a <emphasis>insufficientCredit</emphasis> interaction 
				being reported, which would be unexpected in terms of the choreography.
				</para>
	
			<imageobject>
				<imagedata fileref="en-US/images/TrailBlazerMonitorError.jpg" align="center" width="4in" />
			</imageobject>
	
				<para>
				When errors, such as unexpected messages, are detected by the service validators and reported 
				to the SAVARA Monitor, they are displayed in red.
				</para>
	
			</section>
		</section>
</chapter>
