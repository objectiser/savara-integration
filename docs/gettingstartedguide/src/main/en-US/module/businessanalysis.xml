<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="businessanalysis">
	<title>Business Analysis</title>

	<para>
	</para>
	
	<section>
		<title>Define Participants</title>
		
		<para>
		In the current Eclipse tools, that use the pi4soa Scenario and Choreography based
		models for defining requirements and architectural models, this phase would be
		achieved by defining the Participants and Roles within the choreography model.
		</para>
		
		<para>
		When a choreography description is initially created, using the
		<emphasis>New->Other->Choreography->Choreography Description</emphasis> menu
		item, the roles and relationships can be defined on the first tab.
		</para>
		
		<imageobject>
			<imagedata fileref="en-US/images/RolesAndRelationships.png" align="center" width="4in" />
		</imageobject>
		
		<para>
		Default participant types are automatically created, one per role, and can be
		found on the <emphasis>Base Types</emphasis> tab. For example,
		</para>

		<imageobject>
			<imagedata fileref="en-US/images/ParticipantAndOtherTypes.png" align="center" width="3in" />
		</imageobject>
		
		<para>
		Only these components need to be specified in the choreography model. This enables
		them to be referenced in the subsequently defined scenarios. Otherwise it would be
		necessary to return to the scenarios, once the choreography model had been defined
		in the <emphasis>Architecture</emphasis> phase.
		</para>
	</section>

	<section>
		<title>Outline Scenarios</title>

		<para>
When designing a system, it is necessary to capture requirements. Various approaches can be 
used for this, but currently there are no mechanisms that enable the requirements to be 
documented in such a way to enable an implementation to be validated back against the requirements.
		</para>

		<para>
The pi4soa tools provide a means of describing requirements, representing specific use cases 
for the interactions between a set of cooperating services, using scenarios - which can be 
considered similar to UML sequence diagrams that have been enhanced to include example messages.
		</para>

		<para>
In the <filename>purchasing</filename> Eclipse project, the 
<filename>SuccessfulPurchase.scn</filename> scenario looks like this:
		</para>

		<imageobject>
			<imagedata fileref="en-US/images/SuccessfulPurchasePreTest.jpg" align="center" width="5in" />
		</imageobject>
		
		<para>
		The business requirements can therefore defined as a set of scenarios, each demonstrating
		a specific use-case, or path through the business process being enacted.
		</para>

	</section>

	<section>
		<title>Create Example Messages</title>
		
		<para>
		The next step is to create the example messages required by the scenarios.
		</para>
		
		<para>
		Some previously defined examples can be found in the <filename>purchasing</filename>
		Eclipse project. For example, the Buy request is defined as:
		</para>
		
		<informalexample>
  			<programlisting role="XML" ><![CDATA[
<tns:BuyRequest xmlns:tns="http://www.jboss.org/examples/store" 
			id="1" />
	 		]]></programlisting>
		</informalexample>

		<para>
		Although a schema may not have been defined at this stage, unless one previously
		existed that is being reused, it is a good idea to define a namespace for the
		message type. This is because it will be used within the scenarios and
		architectural models defined in the following stage. If the namespace was not
		specified at this stage, then the example messages, scenarios and architectural
		models would need to be updated at a later stage.
		</para>
		
		<para>
		Although this phase has been defined following the definition of the scenarios,
		in practice these phases are iterative. So scenarios and example messages would be
		defined concurrently. Similarly, new participants may be added in an evolutionary
		manner, as scenarios are created that require them.
		</para>
		
	</section>


</chapter>
